#!/bin/sh
# File: linux/getarchflags
#
# TBD: Make this script extract the mapper flags
#      out of tools/linux/osdep.h.

# Any mapper or environment code that provides Linux kernel
# callbacks, calls into the Linux kernel, or uses kernel
# data structures MUST BE compiled with the flags below.

# Invoke with no args to get environment variable overrides.
# Invoke with -targetcc to get the architecture's matching cc.
# Invoke with -targetccopts to get the architecture's matching cc opts.
#    Invoke with -target <arch> to choose an architecture.
#   Assumes execution architecture otherwise.

# This script can only handle these invokations, which simplifies
# parameter checking.
#  $0
#  $0 -targetcc [-target <arch>]
#  $0 -targetccopts [-target <arch>]

#
# $Copyright udi_reference:
# 
# 
#    Copyright (c) 1995-2001; Compaq Computer Corporation; Hewlett-Packard
#    Company; Interphase Corporation; The Santa Cruz Operation, Inc;
#    Software Technologies Group, Inc; and Sun Microsystems, Inc
#    (collectively, the "Copyright Holders").  All rights reserved.
# 
#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the conditions are met:
# 
#            Redistributions of source code must retain the above
#            copyright notice, this list of conditions and the following
#            disclaimer.
# 
#            Redistributions in binary form must reproduce the above
#            copyright notice, this list of conditions and the following
#            disclaimers in the documentation and/or other materials
#            provided with the distribution.
# 
#            Neither the name of Project UDI nor the names of its
#            contributors may be used to endorse or promote products
#            derived from this software without specific prior written
#            permission.
# 
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#    "AS IS," AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#    HOLDERS OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
#    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
#    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#    DAMAGE.
# 
#    THIS SOFTWARE IS BASED ON SOURCE CODE PROVIDED AS A SAMPLE REFERENCE
#    IMPLEMENTATION FOR VERSION 1.01 OF THE UDI CORE SPECIFICATION AND/OR
#    RELATED UDI SPECIFICATIONS. USE OF THIS SOFTWARE DOES NOT IN AND OF
#    ITSELF CONSTITUTE CONFORMANCE WITH THIS OR ANY OTHER VERSION OF ANY
#    UDI SPECIFICATION.
# 
# 
# $
#

if [ "X$TOPDIR" = "X" ] ; then
TOPDIR=../..
fi
SHELL=/bin/sh

# Explanation of some very verbose compiler flags that we dont use:
# -pedantic is way too verbose when we're dealing with the gcc
#    specific kernel headers. It complains about all non-ANSIisms.
# -Wmissing-prototypes is evil also. It doesn't guess very well.
# -Wmissing-declarations complains when a prototype doesn't exist
#    for a function definition. (aka. The function wasn't in any
#    included header file.
# -Wstrict-prototypes is anal about unspecified parameter lists.

DEBUG_CFLAGS="-DDEBUG -DSTATIC= -Wall -fno-omit-frame-pointer -fno-strict-aliasing"

KMOD_CFLAGS="-DKERNEL -D__MODULE__ -fno-builtin -ffreestanding"

# Ready for cross-compiling...

#TARGETOS= `$SHELL $TOPDIR/env/common/Make_conf -n`
#TARGETDOMAINS= `$SHELL $TOPDIR/env/common/Make_conf -d`

if [ $# = 3 ] ; then
TARGETARCH=$3
else
TARGETARCH="`$SHELL $TOPDIR/env/common/Make_conf -A`"
fi

if [ "X$TARGETARCH" = "Xalpha" ]; then
# Helps with linux/sched.h
ARCH_CFLAGS="-mno-fp-regs -ffixed-8 -mcpu=ev4"
ARCH_LDTARGET="elf64-alpha"

elif [ "X$TARGETARCH" = "Xppc" ]; then
ARCH_CFLAGS="-mmultiple -mstring -ffixed-r2 -msoft-float -fsigned-char"
ARCH_LDTARGET="elf32-powerpc"

elif [ "X$TARGETARCH" = "Xsparc" ]; then
ARCH_CFLAGS="-m32 -pipe -mno-fpu -mcpu=ultrasparc -mcmodel=medlow -ffixed-g4 -fcall-used-g5 -fcall-used-g7 -Wno-sign-compare"
ARCH_LDTARGET="elf32-sparc"

elif [ "X$TARGETARCH" = "Xsparc64" ]; then
ARCH_CC="sparc64-linux-gcc"
ARCH_CFLAGS="-m64 -pipe -mno-fpu -mcpu=ultrasparc -mcmodel=medlow -ffixed-g4 -fcall-used-g5 -fcall-used-g7 -Wno-sign-compare"
ARCH_LDTARGET="elf64-sparc"

elif [ "X$TARGETARCH" = "Xia32" ] ; then
ARCH_CFLAGS=""
ARCH_LDTARGET="elf32-i386"

elif [ "X$TARGETARCH" = "XIA32" ] ; then
ARCH_CFLAGS=""
ARCH_LDTARGET="elf32-i386"

else 
# others
ARCH_CFLAGS=""
ARCH_LDTARGET=""
fi

if [ "X$LINUX_KERNEL_SOURCE_BASE" = "X" ] ; then
    ARCH_CFLAGS="-I/lib/modules/`uname -r`/include -I/usr/include $ARCH_CFLAGS"
else
    ARCH_CFLAGS="-I$LINUX_KERNEL_SOURCE_BASE/include -I/usr/include $ARCH_CFLAGS"
fi

# If ARCH_CC or ARCH_LD doesn't have a default cross compiler, then
# try the normal ones.
if [ "X$ARCH_CC" = "X" ] ; then
    ARCH_CC="cc"
fi
if [ "X$ARCH_LD" = "X" ] ; then
    ARCH_LD="ld"
fi

# If ARCH_LDTARGET is null, there is no specific target.
# This needs to be disabled unless you are in a pure cross
# compile environment with a ld && cc that understand "-b".
#if [ "X$ARCH_LDTARGET" != "X" ]; then
if [ "x" = "y" ]; then
    ARCH_LDOPTS="-r -b $ARCH_LDTARGET"
else
    ARCH_LDOPTS="-r"
fi

# No arguments passed, return appropriate environment overrides.
if [ $# = 0 ] ; then
    echo UDI_CC=\"$ARCH_CC\" UDI_CCOPTS=\"$DEBUG_CFLAGS $ARCH_CFLAGS\" UDI_LD=\"$ARCH_LD\" UDI_LDOPTS=\"$ARCH_LDOPTS\"
    exit
fi

# Grab the first parameter...
ARG=$1

# The user asked for -targetcc...
if [ "X$ARG" = "X-targetccopts" ] ; then

if [ "X$ARCH_LDOPTS" = "X" ]; then
    echo $DEBUG_CFLAGS $ARCH_CFLAGS
else
    echo $DEBUG_CFLAGS $ARCH_CFLAGS # $ARCH_LDOPTS
fi

elif [ "X$ARG" = "X-targetcc" ]; then
    echo $ARCH_CC

elif [ "X$ARG" = "X-targetld" ]; then
    echo $ARCH_LD

elif [ "X$ARG" = "X-targetldopts" ]; then
    echo $ARCH_LDOPTS

else
echo "unknown param $1"
exit 2
fi

