#!/bin/ksh

#
# Run the target program with all available MALLOC_DEBUG options.
# Could eventually run through Purify, efence, or similar utilities...
#

FILE_TO_RUN=`basename $*`

case $FILE_TO_RUN in
	#cmostest requires root permission to use ioperm on Intel
	cmostest) 
		if [ `uname -p` = "i386" ]
		then
			if [ `/usr/ucb/whoami` != "root" ]
			then
				echo "** You are not root. Skipping cmostest."
				exit 0
			fi
		else
			echo "** cmostest not applicable for Sparc."
			exit 0
		fi ;;
	*)	;;
esac

export LD_PRELOAD=watchmalloc.so.1

echo "*** Running $* with MALLOC_DEBUG=WATCH; POSIX_CALLBACK_LIMIT=1"
MALLOC_DEBUG=WATCH POSIX_CALLBACK_LIMIT=1 $* > /dev/null || exit 1

echo "*** Running $* with MALLOC_DEBUG=WATCH,RW; POSIX_CALLBACK_LIMIT=1"
MALLOC_DEBUG=WATCH,RW POSIX_CALLBACK_LIMIT=1 $* > /dev/null || exit 1

echo "*** Running $* with MALLOC_DEBUG=WATCH; POSIX_FAIL_MEM=100"
MALLOC_DEBUG=WATCH POSIX_FAIL_MEM=100 $* > /dev/null || exit 1

echo "*** Running $* with MALLOC_DEBUG=WATCH,RW; POSIX_FAIL_MEM=100"
MALLOC_DEBUG=WATCH,RW POSIX_FAIL_MEM=100 $* > /dev/null || exit 1

echo "*** Running $* with MALLOC_DEBUG=WATCH; POSIX_FORCE_CB_REALLOC=1"
MALLOC_DEBUG=WATCH POSIX_FORCE_CB_REALLOC=1 $* > /dev/null || exit 1

echo "*** Running $* with MALLOC_DEBUG=WATCH,RW; POSIX_FORCE_CB_REALLOC=1"
MALLOC_DEBUG=WATCH,RW POSIX_FORCE_CB_REALLOC=1 $* > /dev/null || exit 1

echo "*** Running $* with all available forms of torture."
MALLOC_DEBUG=WATCH,RW POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 POSIX_FORCE_CB_REALLOC=1 $* > /dev/null || exit 1
