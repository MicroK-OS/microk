#!/bin/sh
# File: linux-user/torture_run
#
# Run the target program with all available malloc debugging options.
# Could eventually run through Purify, efence, or similar utilities...
#

#
# $Copyright udi_reference:
# 
# 
#    Copyright (c) 1995-2001; Compaq Computer Corporation; Hewlett-Packard
#    Company; Interphase Corporation; The Santa Cruz Operation, Inc;
#    Software Technologies Group, Inc; and Sun Microsystems, Inc
#    (collectively, the "Copyright Holders").  All rights reserved.
# 
#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the conditions are met:
# 
#            Redistributions of source code must retain the above
#            copyright notice, this list of conditions and the following
#            disclaimer.
# 
#            Redistributions in binary form must reproduce the above
#            copyright notice, this list of conditions and the following
#            disclaimers in the documentation and/or other materials
#            provided with the distribution.
# 
#            Neither the name of Project UDI nor the names of its
#            contributors may be used to endorse or promote products
#            derived from this software without specific prior written
#            permission.
# 
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#    "AS IS," AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#    HOLDERS OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
#    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
#    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#    DAMAGE.
# 
#    THIS SOFTWARE IS BASED ON SOURCE CODE PROVIDED AS A SAMPLE REFERENCE
#    IMPLEMENTATION FOR VERSION 1.01 OF THE UDI CORE SPECIFICATION AND/OR
#    RELATED UDI SPECIFICATIONS. USE OF THIS SOFTWARE DOES NOT IN AND OF
#    ITSELF CONSTITUTE CONFORMANCE WITH THIS OR ANY OTHER VERSION OF ANY
#    UDI SPECIFICATION.
# 
# 
# $
#

FILE_TO_RUN=`basename $*`
case $FILE_TO_RUN in
        cmostest) if [ $(id -u -n) != "root" ]; then
                        echo "** You are not root.  Skipping cmostest."
                        exit 0;
                  fi
#                  if [ "`uname -m`" == "ppc" ]; then
#                        echo "*** cmostest does not apply to PowerPC"
#                  fi
                  ;;
        *)      ;;
esac              


PROG=$*

try()
{
	echo Running $PROG with $*
	(eval export $* ; $PROG || exit $?) > /dev/null
}

#
# Walk through various efence options to be sure the program doesn't fault.
#

# Use this set of code to break on any assertion or error.
#try EF_ALIGNMENT=0 || exit $?   # This will likely fail on non IA-32 systems.
#try EF_PROTECT_BELOW=1  || exit $?
#try EF_PROTECT_FREE=1 || exit $?
#try EF_PROTECT_FREE=1 POSIX_CALLBACK_LIMIT=1 || exit $?
#try EF_PROTECT_FREE=1 POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 || exit $?
#try EF_PROTECT_FREE=1 POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 POSIX_FORCE_CB_REALLOC=1 || exit $?

# Use this set of code to trudge along, ignoring errors.
try EF_ALIGNMENT=0 # This will likely fail on non IA-32 systems.
try EF_PROTECT_BELOW=1  
try EF_PROTECT_FREE=1 
try EF_PROTECT_FREE=1 POSIX_CALLBACK_LIMIT=1 
try EF_PROTECT_FREE=1 POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 
try EF_PROTECT_FREE=1 POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 POSIX_FORCE_CB_REALLOC=1 

exit 0

#-----------------------------------------------------------------------
# New torture test harness
#-----------------------------------------------------------------------

try()
{
# $1 = MALLOC_CHECKS value
# $2 = string to evaluate.
	#export MALLOC_CHECKS=$1
	#echo Running $PROG with MALLOC_CHECKS=$1 $2
	/bin/echo -n Running $PROG with environment:
	(eval export $2 >/dev/null 2>&1; \
		env 2>/dev/null | egrep "(EF_|MALLOC_|POSIX_)" \
		 | tr '\n' ' ' 2>/dev/null; )
	echo
	(eval export $2 ; $PROG || exit $? ) > /dev/null
	echo
}

PROG=$*

# Show memory leaks.
export POSIX_DUMP_MEMPOOL=1

#
# Walk through various efence options to be sure the program doesn't fault.
#
malloc_stress()
{
	RUN=0
	while [ $RUN -lt 1 ]
	do
		if [ "X$1" = "X1" ]; then
		try $RUN "$2" || exit $?
			try $RUN "EF_ALIGNMENT=0 $2" || exit $?
			try $RUN "EF_PROTECT_BELOW=1 $2" || exit $?
		fi
		try $RUN "EF_PROTECT_FREE=1 $2" || exit $?
		if [ "X$1" = "X1" ]; then
			try $RUN "MALLOC_CHECK_=1 $2" || exit $? ;
			try $RUN "EF_PROTECT_FREE=1 MALLOC_CHECK_=1 $2" || exit $? ;
		fi
        	RUN=`expr $RUN + 1`
	done
}

#
# These test scenarios work perfectly for all test parameters.
#
malloc_stress 1 "" || exit $?
malloc_stress 1 "POSIX_CALLBACK_LIMIT=1" || exit $?
malloc_stress 1 "POSIX_FORCE_CB_REALLOC=1" || exit $?

#
# This test only works properly when efence is debugging it.
#
malloc_stress 0 "POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 POSIX_FORCE_CB_REALLOC=1"  || exit $?

#
# These test scenarios cause problems.
# TBD: resolve the problems.
#
#malloc_stress 0 "POSIX_FAIL_MEM=100" || exit $?
#malloc_stress 0 "POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100" || exit $?
