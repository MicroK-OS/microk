#!/bin/ksh

#
# Run the target program with all available MALLOC_CHECKS options.
# Could eventually run through Purify, efence, or similar utilities...
#

case `uname -r` in
	7.0*) RUN=0 ;; # Ahem, upgrade please.
	*) RUN=-6;;
esac

FILE_TO_RUN=`basename $*`
case $FILE_TO_RUN in
        # ndtest allocates lots of buffers, so we turn down the default
        # checking on that target.
        ndtest) MALLOC_CHECKS=" -5";;
        cmostest) if [ $(id -u -n) != "root" ]; then
                        echo "** You are not root.  Skipping cmostest."
                        exit 0;
                  fi ;;
        *)      ;;
esac


	/bin/echo -n \*\*\* Running $* with MALLOC_CHECKS= >&2
while [ $RUN -lt 8 ]
do
	/bin/echo -n $RUN,  >&2
	# The leading space in MALLOC_CHECKS turns on null pointer
	# traps.
	MALLOC_CHECKS=" $RUN" $* > /dev/null || { echo  "Error" >&2; exit 1; }
	RUN=`expr $RUN + 1`
done

/bin/echo -n "\n*** Running $* with MALLOC_CHECKS= -6; { POSIX_CALLBACK_LIMIT=1," >&2
MALLOC_CHECKS=" -6" POSIX_CALLBACK_LIMIT=1 $* > /dev/null || { echo "Error" >&2 ; exit 1 ; }

/bin/echo -n "POSIX_FAIL_MEM=100, " >&2
MALLOC_CHECKS=" -6" POSIX_FAIL_MEM=100 $* > /dev/null || { echo Error >&2 ;  exit 1 ; }

/bin/echo -n "POSIX_FORCE_CB_REALLOC=1}\n" >&2
MALLOC_CHECKS=" -6" POSIX_FORCE_CB_REALLOC=1 $* > /dev/null || { echo Error >&2 ; exit 1; }

echo "*** Running $* with all available forms of torture."
MALLOC_CHECKS=" -6" POSIX_CALLBACK_LIMIT=1 POSIX_FAIL_MEM=100 POSIX_FORCE_CB_REALLOC=1 $* > /dev/null || { echo Error >&2 ; exit 1; }
