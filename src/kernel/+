#include <fs/ramfs/ramfs.h>
#include <mm/memory.h>
#include <mm/string.h>

void RAMFSDriver::FSInit() {
	inodeTable = (RAMFSObject**)malloc(sizeof(RAMFSObject) * maxInodes);
	currentInode = 0;

	for(int i = 0; i < maxInodes; i++) {
		inodeTable[i] = NULL;
	}

	rootFile = (RAMFSObject*)malloc(sizeof(RAMFSObject));
	rootFile->magic = 0;
	strcpy(rootFile->name, "ramfs");
	rootFile->length = 0;
	rootFile->isFile = false;
	rootFile->firstObject = NULL;
	rootNode = (FSNode*)malloc(sizeof(FSNode));
	rootFile->node = rootNode;
	strcpy(rootFile->node->name, "ramfs");
	rootFile->node->mask = rootFile->node->uid = rootFile->node->gid = rootFile->node->size = rootFile->node->impl = 0;
	rootFile->node->flags = VFS_NODE_DIRECTORY;
	rootFile->node->inode = currentInode;
	rootFile->node->read = NULL;
	rootFile->node->write = NULL;
	rootFile->node->open = NULL;
	rootFile->node->close = NULL;
	rootFile->node->readdir = (readdir_type_t)&this->FSReadDir;
	rootFile->node->finddir = (finddir_type_t)&this->FSFindDir;
	rootFile->node->ptr = NULL;

	rootFile->nextObject = NULL;

	inodeTable[currentInode++] = rootFile;

	inodeTable[currentInode] = NULL;
}

uint64_t RAMFSDriver::FSRead(FSNode *node, uint64_t offset, size_t size, uint8_t **buffer) {

}

uint64_t RAMFSDriver::FSWrite(FSNode *node, uint64_t offset, size_t size, uint8_t *buffer) {

}

void RAMFSDriver::FSOpen(FSNode *node) {

}

#include <sys/printk.h>
DirectoryEntry *RAMFSDriver::FSReadDir(FSNode *node, uint64_t index) {
	if(node->inode > maxInodes) return 0;
	if(inodeTable[node->inode] == NULL) return 0;
	//if(inodeTable[node->inode]->firstObject == NULL) return 0;

	printk("OK %s\n", inodeTable[node->inode]->name);
	while(true);

	if(inodeTable[node->inode]->isFile == true) return 0;

	RAMFSObject *directoryEntry = inodeTable[node->inode]->firstObject;

	for (int i = 0; i < index; i++) {
		if (directoryEntry->nextObject == NULL) return 0;
		directoryEntry = directoryEntry->nextObject;
	}

	DirectoryEntry *entry = (DirectoryEntry*)malloc(sizeof(DirectoryEntry)); // Remember to deallocate this!

	strcpy(entry->name, directoryEntry->name);
	entry->inode = directoryEntry->node->inode;
	return entry;
}

uint64_t RAMFSDriver::FSMakeDir(FSNode *node, const char *name) {
	if(node->inode > maxInodes) return 0;
	if(inodeTable[node->inode] == NULL) return 0;
	if(inodeTable[node->inode]->isFile == true) return 0;

	RAMFSObject *directoryEntry = inodeTable[node->inode]->firstObject;


	while (directoryEntry->nextObject != NULL) {
		directoryEntry = directoryEntry->nextObject;
	}

	directoryEntry = (RAMFSObject*)malloc(sizeof(RAMFSObject));
	directoryEntry->magic = 0;
	strcpy(directoryEntry->name, name);
	directoryEntry->length = 0;
	directoryEntry->isFile = false;
	directoryEntry->firstObject = NULL;
	directoryEntry->node = (FSNode*)malloc(sizeof(FSNode));
	strcpy(directoryEntry->node->name, name);
	directoryEntry->node->mask = directoryEntry->node->uid = directoryEntry->node->gid = directoryEntry->node->size = directoryEntry->node->impl = 0;
	directoryEntry->node->flags = VFS_NODE_DIRECTORY;
	directoryEntry->node->inode = currentInode;
	directoryEntry->node->read = NULL;
	directoryEntry->node->write = NULL;
	directoryEntry->node->open = NULL;
	directoryEntry->node->close = NULL;
	directoryEntry->node->readdir = (readdir_type_t)&this->FSReadDir;
	directoryEntry->node->finddir = (finddir_type_t)&this->FSFindDir;
	directoryEntry->node->ptr = NULL;
	directoryEntry->nextObject = NULL;

	inodeTable[currentInode++] = directoryEntry;

	return currentInode-1;
}

FSNode *RAMFSDriver::FSFindDir(FSNode *node, const char *name) {

}
